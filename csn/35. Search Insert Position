// 9ms，不是最快的

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int n = nums.size();
        if (n == 0) return 0;
        
        int left = 0, right = n - 1;
        while (left < right) {  
            int mid = (left + right ) / 2;
            if (nums[mid] == target)    return mid;
            else if (nums[mid] < target)    left = mid + 1;
            else    right = mid;
        }

        // 说明left == right，如果target > nums[left]，则需要加在left的后面
        // 如果target <= nums[left],则就在left上
        if (nums[left] < target)    return left + 1;
        else    return left;
    }
};

// 6ms，自己写的
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
       int l = 0, r = nums.size();

        // 寻找下界
        while (l < r) {
            int mid = (l+r)/2;
            if (nums[mid] == target) return mid;
            if (nums[mid] > target) r = mid;
            else l = mid + 1;
        }
        return l;
    }
};


// 6ms，背
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int low = 0, high = nums.size()-1;

        // Invariant: the desired index is between [low, high+1]
        while (low <= high) {
            int mid = low + (high-low)/2;

            if (nums[mid] < target)
                low = mid+1;
            else
                high = mid-1;
        }

        // (1) At this point, low > high. That is, low >= high+1
        // (2) From the invariant, we know that the index is between [low, high+1], so low <= high+1. Follwing from (1), now we know low == high+1.
        // (3) Following from (2), the index is between [low, high+1] = [low, low], which means that low is the desired index
        //     Therefore, we return low as the answer. You can also return high+1 as the result, since low == high+1
        return low;
    }
};