查找

33. Search in Rotated Sorted Array

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left = 0, right = nums.size() - 1;

        while(left <= right) {
            int mid = (left + right) / 2;

            if (target == nums[mid])
                return mid;

            // 说明左边是正确且有序的
            if (nums[left] <= nums[mid]) {
                if (target < nums[mid] && target >= nums[left])
                    right = mid - 1;
                else
                    left = mid + 1;
            } else {    // 说明右边有序
                if (target > nums[mid] && target <= nums[right])
                    left = mid + 1;
                else
                    right = mid - 1;
            }
        }

        return -1;
    }
};

34. Search for a Range

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans = {-1, -1};
        int l = 0, r = nums.size();

        // 寻找下界
        while (l < r) {
            int mid = (l+r)/2;
            if (nums[mid] >= target) r = mid;
            else l = mid + 1;
        }
        if (nums[l] == target)  ans[0] = l;
        
        l = 0, r = nums.size();
        // 寻找上界
        while (l < r) {
            int mid = (l+r)/2;
            if (nums[mid] > target) r = mid;
            else l = mid + 1;
        }
        if (nums[r-1] == target) ans[1] = r-1;
        
        return ans;
    }
};

35. Search Insert Position
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
       int l = 0, r = nums.size();

        // 寻找下界
        while (l < r) {
            int mid = (l+r)/2;
            if (nums[mid] == target) return mid;
            if (nums[mid] > target) r = mid;
            else l = mid + 1;
        }
        return l;
    }
};

74. Search a 2D Matrix
// 2分查找的变种

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size(), m = matrix.front().size();
        int l = 0, r = n*m-1;
        while(l <= r) {
            int mid = (l + r) / 2;
            if (matrix[mid/m][mid%m] == target)
                return true;
            else if (matrix[mid/m][mid%m] > target)
                r = mid - 1;
            else
                l = mid + 1;
        }
        return false;
    }
};

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size(), m = matrix.front().size();
        int l = 0, r = n*m-1;
        while(l < r) {
            int mid = (l + r) / 2;
            if (matrix[mid/m][mid%m] == target)
                return true;
            else if (matrix[mid/m][mid%m] > target)
                r = mid;
            else
                l = mid + 1;
        }
        return matrix[r/m][r%m] == target;
    }
};

240. Search a 2D Matrix II
// 不是二分查找。算法复杂度O(n+m)

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix.size(), m = matrix.front().size();
        int row = 0, col = m - 1;
        while (row < n && col >= 0) {
            if (matrix[row][col] == target) return true;
            else if (matrix[row][col] > target) --col;
            else ++row;
        }
        return false;
    }
};