// 13ms，递归求解，isValid可优化

class Solution {
public:
    void solve(vector<vector<string>> &res, vector<string> &strs,int row, int &n) {
        if (row >= n) {
            res.push_back(strs);
            return;
        }

        for (int col = 0; col != n; ++col) {
            if (isValid(strs, row, col, n)) {
                strs[row][col] = 'Q';   // set，选择
                solve(res, strs, row+1, n);
                strs[row][col] = '.';   // reset，不选择
            }
        }
    }
    bool isValid(vector<string> &strs, int row, int col, int n) {
        // 列
        for (int i = 0; i < row; ++i) {
            if (strs[i][col] == 'Q')    return false;
        }
        // /斜线
        for (int i = row, j = col; i >= 0 && j < n; --i, ++j) {
            if (strs[i][j] == 'Q')      return false;
        }

        // \斜线
        for (int i = row, j = col; i >= 0 && j >= 0; --i, --j) {
            if (strs[i][j] == 'Q')      return false;
        }

        return true;
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> res;  //初始化
        vector<string> strs(n, string(n,'.'));
        solve(res, strs, 0, n);
        return res;
    }
};


// 9ms, 优化的
class Solution {
public:
    void solve(vector<vector<string>> &res, vector<string> &temp, vector<int> &flag, vector<int> &flag2, vector<int> &flag3, int &n, int row) {
        if (row >= n) {
            res.push_back(temp);
            return;
        }
        for(int i = 0; i < n; ++i) {
            if (flag[i] && flag2[row+i] && flag3[n-1-row+i]) {
                flag[i] = flag2[row+i] = flag3[n-1-row+i] = 0;
                temp[row][i] = 'Q';
                solve(res, temp, flag, flag2, flag3, n, row+1);
                temp[row][i] = '.';
                flag[i] = flag2[row+i] = flag3[n-1-row+i] = 1;
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        // 竖直方向,斜线方向
        vector<int> flag(n, 1), flag2(2*n-1, 1), flag3(2*n-1, 1);
        vector<vector<string>> res;
        vector<string> temp(n, string(n,'.'));
        solve(res, temp, flag, flag2, flag3, n, 0);
        return res;
    }
};
