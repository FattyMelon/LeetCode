// 细节实现题，时间复杂度不好求。估计是O(2 * wl * N / wl) = O(n)

class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        int slen = s.size(), n = words.size();
        vector <int> result;
        // particular situation
        if (slen <= 0 || n <= 0)
            return result;

        unordered_map <string, int> dict;
        for (int i = 0; i < n; ++i) dict[words[i]]++;

        int wl = words[0].size();
        for (int i = 0; i < wl; ++i) {
            int left = i, count = 0;
            unordered_map <string, int> tdict;  // temp dictionary
            for (int j = i; j <= slen - wl; j += wl) {
                string str = s.substr(j, wl);
                if (dict[str]) {   // if str is in words
                    tdict[str]++;

                    if (tdict[str] <= dict[str]) {
                        count++;
                    } else {
                        while(tdict[str] > dict[str]) {
                            string str1 = s.substr(left, wl);
                            tdict[str1]--;
                            if (tdict[str1] < dict[str1]) count--;
                            left += wl;
                        }
                    }
                    if (count == n) {   // come to answer
                        result.push_back(left);
                        tdict[s.substr(left, wl)]--;
                        count--;
                        left += wl;
                    }
                }
                else {
                    tdict.clear();
                    count = 0;
                    left = j + wl;
                }
            }
        }
        return result;
    }
};