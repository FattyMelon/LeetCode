// count sort

class Solution {
public:
    void sortColors(vector<int>& nums) {
        vector<int> cnt(3, 0);
        for (int i = 0; i < nums.size(); ++i) {
            ++cnt[nums[i]];
        }
        for (int i = 0; i < nums.size(); ++i) {
            for (int j = 0; j < 3; ++j) {
                if (cnt[j] > 0) {
                    nums[i] = j;
                    --cnt[j];
                    break;
                }
            }
        }
    }
};

// O(1), and an one-pass algorithm
void sortColors(int A[], int n) {
    int n0 = -1, n1 = -1, n2 = -1;
    for (int i = 0; i < n; ++i) {
        if (A[i] == 0) 
        {
            A[++n2] = 2; A[++n1] = 1; A[++n0] = 0;
        }
        else if (A[i] == 1) 
        {
            A[++n2] = 2; A[++n1] = 1;
        }
        else if (A[i] == 2) 
        {
            A[++n2] = 2;
        }
    }
}

// one pass in place solution
// 类似快排
void sortColors(int A[], int n) {
    int j = 0, k = n-1;
    for (int i=0; i <= k; i++) {
        if (A[i] == 0)
            swap(A[i], A[j++]);
        else if (A[i] == 2)
            swap(A[i--], A[k--]);
    }
}