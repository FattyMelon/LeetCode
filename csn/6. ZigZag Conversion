

// 16ms，时间复杂度O(n), 空间复杂度O(1)
class Solution {
public:
    string convert(string s, int numRows) {
        if (numRows == 1) 
            return s;
        int step = (numRows - 1) * 2;
        string result;
        for (int i = 0; i < numRows; ++i) {
            int k = i;
            int flag = 0;
            while(k < s.size()) {
                result.push_back(s[k]);
                if (i == 0 || i == numRows - 1) {
                    k += step;
                } 
                else {
                    int temp = (numRows - i - 1) * 2;
                    k += flag ? step - temp : temp;
                    flag = !flag;
                }
            }
        }
        return result;
    }
};


// 28ms, 时间复杂度O(n)， 需要辅助空间来存储
class Solution {
public:
    string convert(string s, int numRows) {
        vector<string> vec(numRows);
        int i = 0, cnt = 0;
        int flag = 0;
        if (numRows == 1) return s;
        for (auto k : s) {
            vec[i] += k;
            i = i + pow(-1, flag);
            if (i == 0) flag = 0;
            else if (i == numRows - 1) flag = 1;
        }
        string result;
        for (auto temp : vec) {
            result += temp;
        }
        return result;
    }
};