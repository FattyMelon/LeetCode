// solution 1

class Solution {
public:
    bool isValid(string s) {
        stack<char> stack1;

        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '(' || s[i] == '[' || s[i] == '{') {
                stack1.push(s[i]);
            } else if (stack1.empty()){
                return false;
            } else {
                if (s[i] == ')' && stack1.top() != '(' ||
                    s[i] == ']' && stack1.top() != '[' ||
                    s[i] == '}' && stack1.top() != '{')
                    return false;
                stack1.pop();
            }
        }

        return stack1.empty();
    }
};


// solution 2

class Solution {
public:
    bool isValid(string s) {
        string left = "{[(";
        string right = "}])";
        stack<char> stackTemp;
        for (auto c : s) {
            if (left.find(c) != string::npos) {
                stackTemp.push(c);
            } else if (stackTemp.empty() || stackTemp.top() != left[right.find(c)]) {
                return false;
            }
            else {
                stackTemp.pop();
            }
        }
        return stackTemp.empty();
    }
};
