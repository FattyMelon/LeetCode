// 6ms, 待看
string longestPalindrome(string s) {
    if (s.empty()) return "";
    if (s.size() == 1) return s;
    int min_start = 0, max_len = 1;
    for (int i = 0; i < s.size();) {
      if (s.size() - i <= max_len / 2) break;
      int j = i, k = i;
      while (k < s.size()-1 && s[k+1] == s[k]) ++k; // Skip duplicate characters.
      i = k+1;
      while (k < s.size()-1 && j > 0 && s[k + 1] == s[j - 1]) { ++k; --j; } // Expand.
      int new_len = k - j + 1;
      if (new_len > max_len) { min_start = j; max_len = new_len; }
    }
    return s.substr(min_start, max_len);
}


// 173ms,不好
class Solution {
public:
    string longestPalindrome(string s) {
        // 动态规划
        // 计算最长回文
        int max = -1;
        int start = -1;
        
        const int len = s.size();
        if (len == 0)   return "";
        
        bool flag[len][len];

        for (int i = len-1; i >= 0; --i) {
            for (int j = i; j < len; ++j) {
                if (i == j)
                    flag[i][j] = true;
                else if (i == j - 1)
                    flag[i][j] = s[i] == s[j];
                else if (s[i] != s[j])
                    flag[i][j] = false;
                else
                    flag[i][j] = flag[i+1][j-1];
                if (flag[i][j] && j-i > max) {
                    max = j-i;
                    start = i;
                }
            }
        }
        
        if (start == -1)
            return "";
        return s.substr(start, max+1);
    }
};