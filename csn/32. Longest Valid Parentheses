// dp
class Solution {
public:
    int longestValidParentheses(string s) {
        vector<int> dp(s.size(), 0);
        int cnt = 0, ans = 0;
        
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '(') {
                cnt++;
            } else if (cnt > 0) {
                cnt--;
                
                dp[i] = 2;
                // for case where s[i - 1] is valid ')'
                dp[i] += (i - 1) >= 0 ? dp[i - 1] : 0;
                // for case where it can concatinate previous '(...)'
                dp[i] += (i - dp[i]) >= 0 ? dp[i - dp[i]] : 0;

                ans = max(ans, dp[i]);
            } 
        }
        return ans;
    }
};

// stack解法
class Solution {
public:
    int longestValidParentheses(string s) {
        int last = -1, ans = 0;
        stack<int> Stack;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '(') {
                Stack.push(i);
            } else {
                if (Stack.empty())    last = i;
                else {
                    Stack.pop();
                    if (Stack.empty())    ans = max(ans, i-last);
                    else    ans = max(ans, i-Stack.top());
                }
            }
        }
        return ans;
    }
};
