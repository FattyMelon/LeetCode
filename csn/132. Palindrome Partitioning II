// 时间复杂度O(n2)， 空间复杂度O(n2)

class Solution {
public:
    int minCut(string s) {
        if (s.empty())    return 0;
        int n = s.size();
        vector<int> f(n + 1);
        vector<vector<int>> dp(n, vector<int>(n, false));
        
        for (int i = 0; i <= n; ++i)    // last is -1
            f[i] = n - i - 1;
        for (int i = n-1; i >= 0; --i) {
            for (int j = i; j < n; ++j) {
                if (s[i] == s[j] && (j - i < 2 || dp[i+1][j-1])) {   // if s[i,j] is palindrome
                    dp[i][j] = true;
                    f[i] = min(f[i], f[j+1] + 1);   // f[j+1]+1!!!!!
                }
            }
        }
        return f[0];
    }
};