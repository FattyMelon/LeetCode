// 状态转移：f[i] = max(f[i-1], prices[i] - valley)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.empty())  return 0;
        int n = prices.size();
        int res = INT_MIN;
        // f(i)代表从0到i最大的收益，g(i)代表从i到n-1最大的收益
        vector<int> f(n, 0), g(n, 0);   
        for (int i = 1, valley = prices[0]; i < n; ++i) {
            valley = min(valley, prices[i]);
            f[i] = max(f[i-1], prices[i] - valley);
        }
        for (int j = n-2, peak = prices[n-1]; j >= 0; --j) {
            peak = max(peak, prices[j]);
            g[j] = max(g[j+1], peak - prices[j]);
        }
        for (int i = 0; i < n; ++i) {
            res = max(res, f[i]+g[i]);
        }
        return res;
    }
};