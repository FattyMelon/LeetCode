class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        if (nums.size() < 3)    return res;
        vector<int> local(3,0);
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size() - 2;) {
            int l = i + 1, r = nums.size() - 1;
            while (l < r) {
                int target = -nums[i];
                if (nums[l] + nums[r] == target) {
                    local[0] = nums[i];
                    local[1] = nums[l];
                    local[2] = nums[r];
                    res.push_back(local);
                    do {
                        ++l;
                    } while (nums[l] == nums[l - 1] && l < r);
                } else if (nums[l] + nums[r] > target) {
                    do {
                        --r;
                    } while (nums[r] == nums[r + 1] && r > l);
                } else {
                    // less than target
                    do {
                        ++l;
                    } while (nums[l] == nums[l - 1] && l < r);
                }
            }
            do {
                ++i;
            } while (nums[i] == nums[i-1] && i < nums.size()-2);
        }
        return res;
    }
};


// 剪枝， 背
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        if (nums.size() < 3)    return res;
        int target = 0;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n - 2; ++i) {
            if (i > 0 && nums[i] == nums[i-1]) continue;
            if (nums[i]+nums[i+1]+nums[i+2]>target) break;
            if (nums[i]+nums[n-2]+nums[n-1]<target) continue;
            
            int left=i+1,right=n-1;
            while(left<right){
                int sum=nums[left]+nums[right]+nums[i];
                if(sum<target) left++;
                else if(sum>target) right--;
                else{
                    res.push_back(vector<int>{nums[i],nums[left],nums[right]});
                    do{left++;}while(nums[left]==nums[left-1]&&left<right);
                    do{right--;}while(nums[right]==nums[right+1]&&left<right);
                }
            }
        }
        return res;
    }
};