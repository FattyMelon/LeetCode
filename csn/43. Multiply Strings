// 好理解，算法速度较慢， 12ms，需翻转字符串

class Solution {
public:
    string multiply(string num1, string num2) {
        int len1 = num1.size(), len2 = num2.size();
        string result = "";

        vector<int> v(len1 + len2 + 1, 0);
        reverse(num1.begin(), num1.end());
        reverse(num2.begin(), num2.end());

        for (int i = 0; i < len1; ++i) {
            for (int j = 0; j < len2; ++j) {
                v[i + j] += (num1[i]-'0') * (num2[j]-'0');
            }
        }

        int sum = 0;
        for (int k = 0; k < len1 + len2 + 1; ++k) {
            sum += v[k];
            v[k + 1] += v[k] / 10;
            v[k] %= 10;
        }

        if (sum == 0)
            return "0";

        reverse(v.begin(),v.end());

        bool zerohead = true;
        for (int i = 0; i < v.size(); ++i)
        {
            if(v[i] != 0)
                zerohead = false;
            if(!zerohead)
                result += v[i] + '0';
        }
        return result;
    }
};

// 6ms, 不需要翻转字符串，只遍历一次。
class Solution {
public:
    string multiply(string num1, string num2) {
        string sum(num1.size() + num2.size(), '0');
    
        for (int i = num1.size() - 1; 0 <= i; --i) {
            int carry = 0;
            for (int j = num2.size() - 1; 0 <= j; --j) {
                int tmp = (sum[i + j + 1] - '0') + (num1[i] - '0') * (num2[j] - '0') + carry;
                sum[i + j + 1] = tmp % 10 + '0';
                carry = tmp / 10;
            }
            sum[i] += carry;
        }
    
        size_t startpos = sum.find_first_not_of("0");
        if (string::npos != startpos) {
            return sum.substr(startpos);
        }
        return "0";
    }
};